diff -ru scintilla324/include/Scintilla.h ElasticTabstopsForScintilla/scintilla324/include/Scintilla.h
--- scintilla324/include/Scintilla.h	Mon Jan 14 22:58:57 2013
+++ ElasticTabstopsForScintilla/scintilla324/include/Scintilla.h	Thu Feb 28 21:22:20 2013
@@ -855,6 +855,7 @@
 #define SCI_VCHOMEDISPLAYEXTEND 2653
 #define SCI_GETCARETLINEVISIBLEALWAYS 2654
 #define SCI_SETCARETLINEVISIBLEALWAYS 2655
+#define SCI_SETTABSTOPS 2660
 #define SCI_STARTRECORD 3001
 #define SCI_STOPRECORD 3002
 #define SCI_SETLEXER 4001
diff -ru scintilla324/src/Document.cxx ElasticTabstopsForScintilla/scintilla324/src/Document.cxx
--- scintilla324/src/Document.cxx	Mon Jan 14 22:58:58 2013
+++ ElasticTabstopsForScintilla/scintilla324/src/Document.cxx	Thu Feb 28 21:22:54 2013
@@ -103,6 +103,7 @@
 	perLineData[ldState] = new LineState();
 	perLineData[ldMargin] = new LineAnnotation();
 	perLineData[ldAnnotation] = new LineAnnotation();
+	perLineData[ldTabstops] = new LineTabstops();
 
 	cb.SetPerLine(this);
 
@@ -2066,6 +2067,30 @@
 			break;
 	}
 	return - 1;
+}
+
+void Document::SetTabstops(int line, int *tabstops)
+{
+	int numTabstops = 0;
+	while (tabstops[numTabstops] != 0) {
+		numTabstops++;
+	}
+
+	LineTabstops *lt = static_cast<LineTabstops *>(perLineData[ldTabstops]);
+	if (lt->SetTabstops(line, tabstops, numTabstops)) {
+		DocModification mh(SC_MOD_CHANGELINESTATE, 0, 0, 0, 0, line);
+		NotifyModified(mh);
+	}
+}
+
+int Document::GetTabstop(int line, int x)
+{
+	LineTabstops *lt = static_cast<LineTabstops *>(perLineData[ldTabstops]);
+	if (lt) {
+		return lt->GetNextTabstop(line, x);
+	} else {
+		return 0;
+  }
 }
 
 /**
diff -ru scintilla324/src/Document.h ElasticTabstopsForScintilla/scintilla324/src/Document.h
--- scintilla324/src/Document.h	Mon Jan 14 22:58:58 2013
+++ ElasticTabstopsForScintilla/scintilla324/src/Document.h	Thu Feb 28 21:23:04 2013
@@ -224,7 +224,7 @@
 	int lenWatchers;
 
 	// ldSize is not real data - it is for dimensions and loops
-	enum lineData { ldMarkers, ldLevels, ldState, ldMargin, ldAnnotation, ldSize };
+	enum lineData { ldMarkers, ldLevels, ldState, ldMargin, ldAnnotation, ldTabstops, ldSize };
 	PerLine *perLineData[ldSize];
 
 	bool matchesValid;
@@ -419,6 +419,8 @@
 	int ParaDown(int pos);
 	int IndentSize() { return actualIndentInChars; }
 	int BraceMatch(int position, int maxReStyle);
+	void SetTabstops(int line, int *tabstops);
+	int GetTabstop(int line, int x);
 
 private:
 	bool IsWordStartAt(int pos);
diff -ru scintilla324/src/Editor.cxx ElasticTabstopsForScintilla/scintilla324/src/Editor.cxx
--- scintilla324/src/Editor.cxx	Mon Jan 14 22:58:58 2013
+++ ElasticTabstopsForScintilla/scintilla324/src/Editor.cxx	Thu Feb 28 21:22:45 2013
@@ -2073,6 +2073,14 @@
 	}
 }
 
+int NextTabstopPos(Document *pdoc, int line, int x, int tabWidth)
+{
+	int next = pdoc->GetTabstop(line, x);
+	if (next > 0)
+		return next;
+	return ((((x + 2) / tabWidth) + 1) * tabWidth);
+}
+
 /**
  * Fill in the LineLayout data for the given line.
  * Copy the given @a line and its styles from the document into local arrays.
@@ -2198,8 +2206,7 @@
 				if (vstyle.styles[ll->styles[charInLine]].visible) {
 					if (isControl) {
 						if (ll->chars[charInLine] == '\t') {
-							ll->positions[charInLine + 1] = 
-								((static_cast<int>((startsegx + 2) / tabWidth) + 1) * tabWidth) - startsegx;
+							ll->positions[charInLine + 1] = NextTabstopPos(pdoc, line, startsegx, tabWidth) - startsegx;
 						} else if (controlCharSymbol < 32) {
 							if (ctrlCharWidth[ll->chars[charInLine]] == 0) {
 								const char *ctrlChar = ControlCharacterString(ll->chars[charInLine]);
@@ -9366,7 +9373,11 @@
 	case SCI_COUNTCHARACTERS:
 		return pdoc->CountCharacters(wParam, lParam);
 
-	default:
+	case SCI_SETTABSTOPS:
+		pdoc->SetTabstops(wParam, reinterpret_cast<int*>(lParam));
+		return 0l;
+
+  default:
 		return DefWndProc(iMessage, wParam, lParam);
 	}
 	//Platform::DebugPrintf("end wnd proc\n");
diff -ru scintilla324/src/PerLine.cxx ElasticTabstopsForScintilla/scintilla324/src/PerLine.cxx
--- scintilla324/src/PerLine.cxx	Mon Jan 14 22:58:58 2013
+++ ElasticTabstopsForScintilla/scintilla324/src/PerLine.cxx	Thu Feb 28 21:22:35 2013
@@ -501,3 +501,80 @@
 	else
 		return 0;
 }
+
+LineTabstops::~LineTabstops() {
+	Init();
+}
+
+void LineTabstops::Init() {
+	for (int line = 0; line < tabstops.Length(); line++) {
+		delete tabstops[line];
+	}
+	tabstops.DeleteAll();
+}
+
+void LineTabstops::InsertLine(int line) {
+	if (tabstops.Length()) {
+		tabstops.EnsureLength(line);
+		tabstops.Insert(line, 0);
+	}
+}
+
+void LineTabstops::RemoveLine(int line) {
+	if (tabstops.Length() > line) {
+		delete tabstops[line];
+		tabstops.Delete(line);
+	}
+}
+
+bool LineTabstops::SetTabstops(int line, int *newTabstops, int numNewTabstops) {
+	tabstops.EnsureLength(line + 1);
+	if (!tabstops[line]) {
+		tabstops[line] = new TabstopList();
+	}
+
+	TabstopList *tl = tabstops[line];
+	if (tl) {
+		// Are the new tabstops the same as the old ones?
+		if (numNewTabstops == tl->Length()) {
+			bool same = true;
+			for (int i = 0; i < numNewTabstops; i++) {
+				if (tl->ValueAt(i) != newTabstops[i]) {
+					same = false;
+				}
+			}
+			if (same) {
+				return false;
+			}
+		}
+
+		// Resize the array of tabstops
+		if (numNewTabstops < tl->Length()) {
+			tl->DeleteRange(numNewTabstops, tl->Length() - numNewTabstops);
+		} else {
+			tl->EnsureLength(numNewTabstops);
+		}
+
+		// Set the new tabstop values
+		PLATFORM_ASSERT(tl->Length() == numNewTabstops);
+		for (int i = 0; i < numNewTabstops; i++) {
+			tl->SetValueAt(i, newTabstops[i]);
+		}
+	}
+	return true;
+}
+
+int LineTabstops::GetNextTabstop(int line, int x)
+{
+	if (line < tabstops.Length()) {
+		TabstopList *tl = tabstops[line];
+		if (tl) {
+			for (int i = 0; i < tl->Length(); i++) {
+				if ((*tl)[i] > x) {
+					return (*tl)[i];
+				}
+			}
+		}
+	}
+	return 0;
+}
diff -ru scintilla324/src/PerLine.h ElasticTabstopsForScintilla/scintilla324/src/PerLine.h
--- scintilla324/src/PerLine.h	Mon Jan 14 22:58:58 2013
+++ ElasticTabstopsForScintilla/scintilla324/src/PerLine.h	Thu Feb 28 21:23:16 2013
@@ -114,6 +114,22 @@
 	int Lines(int line) const;
 };
 
+typedef SplitVector<int> TabstopList;
+
+class LineTabstops : public PerLine {
+	SplitVector<TabstopList *> tabstops;
+public:
+	LineTabstops() {
+	}
+	virtual ~LineTabstops();
+	virtual void Init();
+	virtual void InsertLine(int line);
+	virtual void RemoveLine(int line);
+
+	bool SetTabstops(int line, int *tabstops, int numTabstops);
+	int GetNextTabstop(int line, int x);
+};
+
 #ifdef SCI_NAMESPACE
 }
 #endif
